Javascript language:

	types:
		-Number
			-problems:
				-NaN
				-+/-Infinity
		-BigInt
		-String
		-Boolean
		-Symbol
		-Object
			-function	
				-function avg(...args) {
					let sum = 0
					for(const item of args)
						sum+=item
					return sum/args.length
				}
				avg(2,3,4,5) //3.5
				-IIFE Immediatly Invoked Function Expression
					-( function () {
					 }) ();
	
					-(() => {
					 }) ();
	
					-(async () => {
					 }) ();
			-array
				-special type of object
			-date
			-RegExp
		-null
			-non-value
		-undefined
			-value hasn't even been assigned yet
		-error
		
	-set of types:
		-primitive values -> unchangable values
		-objects
	
	-symbol type -> unique value
	
	-object properties:
		-data property
		-accessor property (get, set)
	
	-every value and variables that programmer makes are copies of real values and variables which interpreter uses and can't be reached. Garbage collector deletes that values. While there is at least one reference
	 to original variable garbage collector won't delete variable
	
	-inner functions -> function can access to variables, properties of function above her, her parent function.
	
	-closuers:
		-function makeAdder(a) {
			return function(b) {
				return a + b
			}
		}
		const add5 = makeAdder(5)
		const add20 = makeAdder(20)
		add5(6) + ' ' + add20(7)	//11 27
		
		-lexical scoping -> functional scope
			-function init() {
				var name = 'Mozzila'		// name is a local variable created by init
				function displayName() {	// is the inner function, a closure
					console.log(name)		// use variable declared in the parent function
				}
				displayName()
			}
			init()
		
		-emulating private methods with closures
			-two variables maintain their independence from one another
				-closure is like OOP(object-oriented programming), data hiding and encapsulation
		
		-closure scope chain
			-local scope (own scope)
			-enclosing scope (block, function, module, scope)
				-A common mistake is not realizing that in the case where the outer function is itself a nested function,
				 access to the outer function's scope includes the enclosing scope of the outer functionâ€”effectively creating a chain of function scopes.
			-global scope
	
	
	-equality comparisors and sameness
		-IsLooselyEqual(==)
		-IsStrictlyEqual(===)
		-SameValueZero
		-SameValue
	
	-performance consideration:
		-closures
		-object prototype > object constructor
			-one prototype can be used by any object but constructor need to be called by every object separetly