PHP je skriptni jezik koji se izvršava na poslužitelju, a glavna mu je namjena
dinamičko stvaranje web stranica.


Klijent šalje zahtjev, poslužitelj isporučuje odgovor, http zahtjev 
koji sadrži html kod i potrebne datoteke, što će klijent interpretirati i prikazati.


http protokol: http zahtjev i http odgovor.


PHP i javascript su podskup skirptnih jezika za koje je karakteristično 
da se program ne čuva u izvršnoj (exe) datoteci koja je prevedena samo jednom,
već se prevođenje obavlja pri svakom izvršavanju programa. Datoteke i dijelovi koda
napisani u takvim jezicima nazivaju se skriptama.


HTML stranice s klijentskim skriptama-> klijentske skripte
1.izvršavaju se na klijentu.
2.nemogućnost izravnog povezivanja s bazama podataka.
3.aplikacija reagira trenutačno
4.poslužitelj se rasterećuje korištenjem resursa klijenta.

HTML stranice stvorene pomoću poslužiteljskih skrpiti-poslužiteljske skripte
1.izvršavaju se na poslužitelju.
2.povezivanje s bazama podataka.
3.dulje vrijeme čekanja na odgovor, potrebno osvježenje cijele stranice.
4.uvijek se koriste resursi poslužitelja.

AJAX je tehnologija koja kombinira klijentsko i poslužiteljsko skriptiranje.
Na određenu korisnikovu akciju klijentska skripta šalje pozadinski zahtjev skripti
na poslužitelju koja obavlja dohvaćanje podataka iz baze podataka i šalje
ih korisnikovom pregledniku, bez osvježavanja.


PHP-> Hypertext Preprocessor - rekurzivna skraćenica
PHP-> hipertekstualni pretprocesor, glavna funkcija php-a, da na temelju
php naredbi generira HTML, jezik kojim se opisuje hipertekst.


Klijent<--HTTP zahtjev-->Internet<-->|||Web poslužitelj(Apache)<-->Izvršno okruženje PHP-a
(PHP)<-->MySql baza podataka|||


PHP-objektno-orijentirano programiranje.


framework(razvojna platforma) za php -> Zend Framework, Sympfony

-----------------------------------------------------------------------------------------------------------------------------------

OSNOVE PHP SINTAKSE

PHP naredbe se moraju nalaziti unutar posebnih php oznaka  <?php?> kako bi ih PHP prevoditelj mogao prepoznati.

Na web poslužitelju s instaliranim prevoditeljom za PHP početna stranica za svaku mapu je ona koja se zove index.php.

Web preglednik dobiva već gotov HTML kod koji je generiran na poslužitelju kada je pozvana stranica. 
	->php oznake se već obrađene na strani poslužitelja, klijentska strana nema obaveze oko php oznaka.

Razlika između klijentskog i poslužiteljskog skriptiranja:
Klijentska strana -> javascript stalno ažurira stranicu
Poslužiteljska strana -> php, stranica se ažurira kada se stranica osvježi, osvježavanje stranice je ponovno slanje zahtjeva poslužitelju i primanja odgovora.


-------------------------------------------------------------------------------------------------------------------------------------

VARIJABLE I OPERACIJE NAD NJIMA

2 specijalna tipa varijabli:
	->resource - vrijednost koju vraća neka funkcija (memorijska adresa, datoteka, skup zapisa iz baze).
	->NULL - tip koji poprima varijabla kojoj nije pridružena vrijednost.

Vrijednost konstanti se ne može mijenjati kada se jednom deklarira. Konstante bi se u pravilu trebali pisati velikim slovima bez $.

Prioritet aritmetičkih operacija je jednak kao u matematici -> na izvršavanje operacija ne prati redoslijed kojima su napisane,
već će se određene operacije izvršiti prije ovisno o njihovom prioritetu.

Spajanje znakovnih nizova je operator . dakle nije +. Možemo koristiti .= kao += u C#

Ispis vrijednosti - varijabla se može pisati unutar navodnika, ne moramo koristiti operator spajanja. Ovo vrijedi samo za dvostruke navodnike.
	->Unutar dvostrukih navodnika moguće je ispisati i razne specijalne znakove:
		/n line feed
		/r carriage return
		/t tabulator, tabluator je znak koji nastaje kada se pritisne gumb Tab.
		/" ispisuje znak "
		// ispisuje znak /

------------------------------------------------------------------------------------------------------------------------------------

OPERATORI USPOREDBE, LOGIČKI OPERATORI I UVJETNE STRUKTURE

1. Operatori usporedbe
	== jednako
	=== identično -> ista vrijednost istog tipa
	!=, <> nije jednako
	!== nije identično
	
	naredba echo za TRUE ispisuje "1", a za FALSE ""

2 Logički operatori
	! negacija								PRIORITET: 1
	&&, and									PRIORITET: 2,(and)3
	||, or									PRIORITET: 4,(or)5
	xor - ako je samo jedna vrijednost true, ekskluzivno ili		PRIORITET: 6
		->mogu se koristiti zagrade kako bi neke operacije dobile prioritet.


-------------------------------------------------------------------------------------------------------------------------------------

POLJA

Polja sa znakovnim ključem nazivaju se asocijativna polja (Dictionary, mape).

Dvodimenzionalnim poljima je moguće dati naziv za određeno polje odnosno red u tablici


------------------------------------------------------------------------------------------------------------------------------------

PETLJE

Upotrebom petlje foreach nije moguće izmjeniti vrijednost člana polja. Razlog tome je što se u svakome krugu petlje stvara kopija
člana polja i smješta u varijablu. Izmjena te varijable neće se odraziti na vrijednost člana polja.
	->Da bi se izmjenila vrijednost člana polja, potrebno je petlji foreach rabiti referencu na njega, a ne kopije vrijednosti.
	 Referenca se dobije pomoću operatora & i označava da VARIJABLA POKAZUJE NA ORGINALNU VRIJEDNOST, odnosno orignalnu varijablu
	 za članove polja.

Prijevremeni izlazak iz petlje -> break
Preskakanje ostatka naredbi u petlji -> continue



------------------------------------------------------------------------------------------------------------------------------------

FUNKCIJE

Nazivi funkcija nisi osjetiljiva na mala i velika slova, mojafunkcija == mojaFunkcija

Predefinirani argumenti, vrijednost koja se zadaje parametru prilikom defincije funkcije.
	->prvo se navode svi "obični" argumenti zatim na kraju predefinirani.
	->prilikom poziva funkcije možemo navesti i predefinirani argument, ali ako ga
	 ne navedemo, on će poprimiti unaprijed zadanu vrijednost.

Prijenos argument po vrijednosti -> funkcija dobiva kopiju varijable, ne mijenja orginalnu varijablu.
Prijenos argumenta po referenci -> operator &, sada koristimo orginalnu varijablu, ne njenu kopiju.

Uključivanje vanjske datoteke u kod:
	1.include(naziv skrpite u kojoj se nalazi nešto što želimo koristiti u trenutnoj skripti)
		-ako datoteka ima pogrešku, ona će se ispisati, ali ĆE se skripta nastaviti s izvršavanjem.
	2.require(naziv skrpite u kojoj se nalazi nešto što želimo koristiti u trenutnoj skripti)
		-ako datoteka ima pogrešku, ona će se ispisati, ALI skripta NEĆE nastaviti s izvršavanjem.
->pomoću include i require možemo uključivati i datoteke s html kodom ili teksutalne datoteke. Sadržaj uključene datoteke
  bit će umetnut na mjestu poziva naredbe include ili require.

Doseg varijabli
	->lokalne varijable: varijable definirane unutar funkcija, nemaju značenje izvan funkcije.
	->globalne varijable: definirane izvan funkcija, vidljive su untar cijele datoteke i svih uključenih datoteka,
	  ali ne i unutar funkcija. 
		->ako želimo koristit varijablu unutar funkcije moramo koristiti deklaraciju s global.
	->predefinirane globalne varijable, superglobalne varijable: dostupne na bilo kojem mjestu u svim skriptama.
		->ključna riječ $GLOBALS je polje u koje spremamo superglobalne varijable, iz polja dohvaćamo vrijednosti
		  preko imena varijable.
		->dostupnih predefiniranih globalnih polja:
				&_SERVER	->vrijednost postavljene od strane web poslužitelja
				&_ENV 		->vrijednost iz okruženja u kojem je instaliran php
				&_GET		->vrijednost dostupne u URL-u trenutne stranice
				&_POST		->vrijednost prenešene u HTTP zahtjevu metodom POST
				&_COOKIE	->vrijednost zapisane u kolačićima (tekstualne datoteke koje web preglednik sprema na korisnikov račun
				&_REQUEST	->vrijednosti iz polja $_GET, $_POST i $COOKIE.
				&_FILES		->vrijednosti koje se odnose na datoteke poslane na poslužitelj.



U PHP-u nema deklariranja varijable (navođenja tipa podataka koji varijabla koristi). 
Pod definiranjem varijable ovdje se smatra prvo pridjeljivanje vrijednosti varijabli.



------------------------------------------------------------------------------------------------------------------------------------

UGRAĐENE FUNKCIJE PHP-a


1.Funkcije za rad s znakovnim nizom

->trim()
	-briše/miče sve praznine s početka i kraja znakovnog niza (razmake, tabulatore).

->startolower()/startoupper()
	-pretvaranje znakova u nizu u zankove napisane samo velikim/malim slovima.

->strlen()
	-vraća duljinu zadanog niza.

->substr()
	-služi za dobivanje dijela ulaznog niza.
	-argumenti su ulazni niz, položaj od kojeg kreće traženi podniz i opcionalno duljina podniza

->str_replace()
	-koristi za zamjenu dijelova niza u ulaznom nizu.
	-argumenti su: traženi podniz, podniz koji će zamjeniti traženi niz te ulazni niz. Opcionalno broj zamjena.

->explode()
	-pretvaranje znakovnog niza u polje
	-argumenti: niz po kojem se ulazni niz rastavlja, ulazni niz i opcionalno max broj članova u polju.

->implode()
	-obrnuto od explode, služi za pretvaranje polja u znakovni niz.


2.Funkcije za rad s poljima

->count()

->in_array()
	-provjera nalazi li se zadani član u polju.

->array_sum()
	-vraća zbroj svih članova polja.

->shuffle()
	-nasumično će promjeniti poredak članova polja.

->sort()
	-sortiranje članova polja
		-brojčani članovi po veličini
		-stringove po abecedi

->asrot()/ksort()
	-sortiranje polja sa znakovnim ključevima, sortira polje po vrijednostima (asort) odnosno po ključevima (ksort)

->each()
	-dohvaćanje članova polja


3.Funkcija za rad s datumima i vremenom

PHP koristi format poznat kao Unixova vremenska oznaka -> broj sekundi protekli od od početka Unixove epohe
odnosno 1. 1. 1970.

->mktime()
	-stvara unixovu vremensku epohu.

->date()
	-služi za pretvaranje Unixove vremenske epohe u željeni format

->getdate()
	-koristi za dohvaćanje pojedninog podatka iz vremenske oznake.

->checkdate()
	-provjerava je li zadani datum ispravan.


4. Funkcije za prekid rada skripte

->exit() ili die()
	-prekida rad skripte
	-kao argument predaje se tekst poruke koja se želi ispisati kao razlog prekida ili status.


5.Funkcija isset()
	-provjera je li nekoj varijabli pridijeljena vrijednost.

------------------------------------------------------------------------------------------------------------------------------------

OBRASCI I PRIJENOS PODATAKA IZMEĐU SKRIPTI

Kada korisnik ispuni obrasce sadržane u html kodu oni se šalju na poslužitelj gdje će ih dohvatiti i obraditi php skripta.
PHP skripta može ispunjene obrasce odnosno podatke koje je obradila spremiti u bazu, u datoteku, poslati mail ili prikazati
nekakav rezultat, ovisno o značenju obrade koju će izvršiti PHP.
PHP skripta kojoj se šalju podaci navedena je kao vrijednost atributa action, dok je način ili metoda prijenosa podataka određena
atributom method -> postoje dvije metoda slanja podataka koje su dio HTTP protokola
	-GET->podaci se šalju unutar URL adrese. Podaci su tada vidljivi u navigacijskoj traci preglednika pa tako i lozinke,
 	 a i dužina URL adrese je ograničena pa se ne može poslati velika količina (max 4kB)
	   ->Prijenos podataka GET metodom koristi se najčešće odvojeno od obrasca kad je potrebno nekoj skripti poslati 
	     malu količinu podataka kao što je link odnosno URL adresi skripte koju želimo prikazati.
	-POST->podaci se šalju unutar tijela HTTP zahtjeva i ne postoji ograničenje za količinu.
PHP skirpit koja je zapisanu u metodi action, odnosno kojoj se šalju podaci će imati te podatke u polju $_GET ili
u polju $_POST. To su asocijativna polja čijem se članu može pristupiti preko vrijednosti atributa name željenog
elementa obrasca. Postoji i polje $_REQUEST, ono sadrži podatke neovisno da li su podaci poslani GET ili POST metodom.
 
Obrasci: slikovno dugme i skriveno polje.



------------------------------------------------------------------------------------------------------------------------------------

RAD S DATOTEKAMA

Slanje datoteke na poslužitelj (upload) je moguće pomoću elementa obrasca <input type"file">

Funkcija fopen vraća pokazivač na datoteku (pointer, file handler). Varijabla koja vraća pokazivač je tipa resource
	->fopen primat argument koji označava način rada s tom datotekom
		-r(read), r+(read and write), w(write), w+(citanje i pisanje, ako datoteka ne postoji stvara se), 
		 a(append, dodavanje u datoteku, postojeći sadržaj se ne briše), a+(append, postojeći sadržaj se ne briše),
		 b(binary, rad s binarnim datotekama).
	->provjera da li je vraćeni pokazivač prazan nam govori da je otvaranje datoteke uspjelo.
		-pokazivač je prazan -> dogodila se greška
		-pokazivač nije prazan -> otvaranje datoteke je uspješno
Funkcija fclose zatvara datoteku.

Koraci potrebni za ispravan rad s datotekom
	->otvaranje datoteke
	->provjera da li je datoteka uspješno otvorena
	->čitanje/pisanje 
	->zatvaranje datoteke

Čitanje iz datoteke:
	->funkcije primaju pokazivač na datoteku i duljinu niza koji se čita u bajtovima tako da se funkcije mogu orijentirati u datoteci gdje su pozicionirane
		-fread -> čitanje iz datoteke.
		-fgets -> čitanje jednog retka
		-fgetc -> čitanje jednog znaka
		-feof -> vraća vrijednost true ako je pokazivač datoteke na kraju datoteke, što znači da je cijela pročitana

Pisanje u datoteku:
	->fwrite -> prima 3 argumenta
		-pokazivač na datoteku
		-tekst koji treba upisati
		-duljina teksta u bajtovima(opcionalno), ako se navede zapisuje se prvih toliko bajtova teksta

Slanje datoteke na poslužitelj
	->pomoću elementa obrasca
	->na poslužiteljskoj strani poslanim datoteka možemo pristupiti preko dvodimenzionalnog polja $_FILES
		-prva dimenzija označava naziv polja za odabir (atribut name)
		-druga dimenzija se odnosi na pojedinu vrijednost vezanu za dokument
	->move_upload_file funkcija za spremanje datoteke pod željenom putanjom i imenom datoteke




------------------------------------------------------------------------------------------------------------------------------------

SJEDNICE I AUTENTIKACIJA KORISNIKA 

HTTP protokol ne čuva prijašnje zahtjeve, on ne zna od koga dobiva zahtjev. Zato se za svakog korisnika stvara sjednica koja zapoćinje spajanjem klijenta
na poslužitelj, a završava njegovim odlaskom (nakon što protekne određeno vrijeme od njegove zadnje akcije).
	->jedan od načina ostvarivanja sjednica su kolačići
		->kratak tekst koji razmjenjuju poslužitelj i klijent unutar HTTP zaglavlja i odgovara
		->razmjena podataka pomoću kolačića:
			->klijent šalje zahtjev poslužitelju za nekom stranicom
			->poslužitelj šalje odgovor i zajedno s njim kolačić
			->klijent sprema kolačić(kao tekstualnu datoteku na korisnikovo računalo)
			->pri sljedećem zahtjevu poslanom na isti poslužitelj, klijent šalje kolačić natrag na poslužitelj
		->sadrži identifikator pomoću kojeg poslužitelj može prepoznati klijenta.
		->koriste se za spremanje raznih korisničkih postavki(odabir jezika stranice...)
		->funkcija setcookie
			->naziv kolačića, vrijednost, (datum do kada kolačić vrijedi), (putanja), (domena), (sigurnost->1 = slanje preko HTTPS sigurne veze)

		->kolačići koje je korisnik poslao nalaze se na poslužitelju u globalnom polju $_COOKIE

HTTPS je veza između poslužitelja i klijena koja se odvija putem HTTPS protokola. Nadogradnja na HTTP je SSL-sloj Secure Sockets Layer u kojem se podaci
ne šalju u jasnom (clear text) već u enkriptiranom obliku.

Poslužitelj ostvaruje sjednicu(spoj sesije) s pojedinim klijentom kao niz HTTP zahtjeva i odgovora između njih.
Identifikator sjednice se stvara na poslužitelju i šalje se klijentu koji onda šalje taj identifikator svaki prilikom slanja zahtjeva.
Sjednica će trajati sve dok stižu zahtjevi klijenta. u PHP-u ako od posljednjeg zahtjeva je prošlo više od 30minuta, sjednica se automatski zatvara
Ako kolačići nisu podržani u korisnikovom web pregledniku, identifikator sjednice će se prosljeđivati preko URL-a
Sjednice se mogu upotrebljavati za spremanje podataka koji su vezani za sjednicu, takvi podaci se spremaju u varijable sjednice koje će biti vidljive samo
za tog korisnika i trajat će dok traje i sjednica.
	->vrijednosti varijabli sjednice spremaju se ako nije drugačije određeno u datotekama u mapi /tmp na poslužitelju
	->Varijable sjednice se spremaju u globalno polje $_SESSION
	->stvaranje nove varijable sjednice je zapravo dodavanje novog člana u polje $_SESSION
	->varijable sjednice se čuvaju na poslužitelju. Preko identifikatora sjednice moguće je pristupiti varijablama.
	->korištenje varijabli sjednice je još jedan način čuvanja podataka izemđu dva http zahtjeva.
Otvaranje sjednice:
	->za započinjanje sjednice potrebno je pozvati funkciju session_start.
	->potrebno je pozvati na početku svake skripte (iako je sjednica već započela) jer će se tada varijable sjednice učitati u polju $_SESSION
	->ako se na poslužitelju vrijednost session.auto_start postavi na 1 sjednica će automatski započinjato po primanju prvog klijentovog zahtjeva
	 	->predefinirana vrijednost ove postavke je 0
Zatvaranje sjednice:
	->automatski će se zatvoriti kada protekne određeni vremenski rok.
	->funkcijom session_destroy je moguće sjednicu ranije zatvoriti.
		->nakon ove funkcije vrijednost varijabli sjednice bit će izgubljene.

Autentikacija korisnika:
	->provjera identiteta korisnika, korisničko ime i lozinka
		->autentikacija je provjera identiteta korisnika
		->autorizacija je provjera da li korisnik čiji je identitet već potvrđen prava za pristup određenom resursu.
	->nakon ispravne prijave, korištenjem varijabkle sjednice zapisat će da je autentikacija korisnika izvršena tako da se korisnik neće morati ponovno
	 prijavljivati prilikom svakog novog zahtjeva
		->kad sjednice istekne, korisnik se mora ponovno prijaviti
	->svaka PHP sjednica dobiva nasumični identifikator koji se zatim enkriptira. Isto su tako i lozinke u bazi enkriptirane
		->za enkripciju lozinki/identifikatora sjednica koristi se posebna metoda enkripcije - izračunavanje sažetka poruke (message digest, hash)
			->ne može se dobiti orginalna lozinka, ali se iz lozinke može dobiti njen enkriptirani oblik i tako provjeriti je li upisana lozinka točna
	->session hijacking -> napadač presretne klijentov HTTP i iz njega preuzme identifikator sjednice ili lozinku. Zbog toga se koristi veća sigurnost ->HTTPS protokol.


------------------------------------------------------------------------------------------------------------------------------------

SUSTAV ZA UPRAVLJANJEM SADRŽAJEM WEB STRANICA

CMS- Content Managment System

Zahtjevi sustava
	->zahtjevi koji određeni sustav traži kako bi mogao funkcionirati u određenom zamišljenom načinu
Javni dio sustava
	->dio koji je dostupan svima na internetu, index.php
Administrativni dio sustava
	->dostupan samo korisnicima koji prođu autentikaciju


------------------------------------------------------------------------------------------------------------------------------------



